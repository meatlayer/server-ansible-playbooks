- name: preparing configurations
  fail: 
    msg="Unable to find settings. Please, specify JSON config (-e @config/simple.json)."
  when: (stores is not defined)

- name: Check System version
  fail:
    msg="This version of the operating system is not supported!"
  when: (ansible_distribution == "CentOS" and ansible_distribution_major_version|int > "7") or (ansible_distribution == "Ubuntu" and ansible_distribution_version > "22.04") or (ansible_distribution == "Debian" and ansible_distribution_major_version|int > "9")

- name: fetch variables
  include_vars: "{{ ansible_distribution|lower }}.yml"
  tags:
    - common


# For OpenVZ (if the system is an openVZ container, then selinux conf does not exist)
- name: Check if SElinux conf Exists 
  stat: path=/etc/selinux/config
  register: p
  when: ansible_distribution == "CentOS"
  tags:
    - common

- name: Disabled SELinux
  command: "setenforce 0"
  when: ansible_distribution == "CentOS" and p.stat.exists
  ignore_errors: yes
  tags:
    - common

- name: ensure SELinux is turned off
  selinux: 
    state=disabled
  when: ansible_distribution == "CentOS" and p.stat.exists
  tags:
    - common

# If the service is not found, then the iptables stopping is skip
- name: Check if Iptables Exists 
  stat: path=/etc/init.d/iptables
  register: iptables
  when: ansible_distribution == "CentOS" and ansible_distribution_major_version == "6"
  tags:
    - common

- name: ensure firewall is turned off for CentOS 6
  service: 
    name=iptables 
    state=stopped 
    enabled=no
  when: ansible_distribution == "CentOS" and ansible_distribution_major_version == "6" and iptables.stat.exists
  tags:
    - common

# If the service is not found, then the firewalld stopping is skip
- name: Check if Firewalld Exists 
  stat: path=/usr/lib/systemd/system/firewalld.service
  register: firewalld
  when: ansible_distribution == "CentOS" and ansible_distribution_major_version == "7"
  tags:
    - common

- name: ensure firewall is turned off for CentOS 7
  systemd: 
    name=firewalld 
    state=stopped 
    enabled=no
  when: ansible_distribution == "CentOS" and ansible_distribution_major_version == "7" and firewalld.stat.exists
  tags:
    - common

#Adding REPO
- name: Add ondrej/php apt repository for Ubuntu
  apt_repository:
    repo: 'ppa:ondrej/php'
    codename: "{{ ansible_distribution_release }}"
    state: present
  when: ansible_distribution == "Ubuntu"
  tags:
    - common

- name: installing dotdeb repository for Debian
  template:
    src: sources.list.d/dotdeb.list.j2
    dest: /etc/apt/sources.list.d/dotdeb.list
  when: ansible_distribution == "Debian"
  tags:
    - common

- name: adding GPG key for DotDeb
  apt_key:
    url: http://www.dotdeb.org/dotdeb.gpg 
    state: present
  when: ansible_distribution == "Debian"
  tags:
    - common

- name: installing EPEL and REMI repository for CentOS
  yum: 
    name={{ item }} 
    state=present 
  with_items:
    - "https://dl.fedoraproject.org/pub/epel/epel-release-latest-{{ ansible_distribution_major_version }}.noarch.rpm"
    - "http://rpms.famillecollet.com/enterprise/remi-release-{{ ansible_distribution_major_version }}.rpm"
  when: ansible_distribution == "CentOS"
  tags:
    - common

#Installing packages
- name: installing basic components via apt
  apt: 
    name={{ item }} 
    state=present 
  with_items: '{{common.packages}}'
  when: ansible_distribution == "Debian" or ansible_distribution == "Ubuntu"
  tags:
    - common

- name: installing basic components via yum
  yum: 
    name={{ item }} 
    state=present
  with_items: '{{common.packages}}'
  when: ansible_distribution == "CentOS" 
  tags:
    - common

#Creating users and groups
- name: create custom groups
  group:
    name={{ item }}
    state=present
    system=yes
  with_items:
    - "{{ service.group }}"
    - "{{ deploy.group }}"
    - "developers"
    - "sysadmins"
  tags:
    - common

- name: creating user for service
  user:
    name={{ service.user }}
    group={{ service.group }}
    state=present
    createhome=no
    system=yes
  tags:
    - common

- name: creating user for deployment
  user:
    name={{ item.name }}
    group={{ item.group }}
    home={{ item.home }}
    groups={{ item.groups }}
    shell=/bin/bash
    state=present
    createhome=no
  with_items:
    - { name: "{{ deploy.user }}", group: "{{ deploy.group }}", home: "{{ stores_dir }}", groups: "developers" }
    - { name: "{{ sysadmin.user }}", group: "{{ sysadmin.group }}", home: "/home/{{ sysadmin.user }}", groups: "sysadmins" }
  tags:
    - common

#Setting sudoers rules
- name: copying sudoers configurations
  template:
    src: etc/sudoers.d/security.j2
    dest: /etc/sudoers.d/00-security
    mode: 440
    owner: root
    group: root
  tags:
    - common
